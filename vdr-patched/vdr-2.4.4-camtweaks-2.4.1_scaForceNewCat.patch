--- a/ci.c.orig	2020-07-16 20:59:06.930115072 +0200
+++ b/ci.c	2020-07-17 17:34:51.073445956 +0200
@@ -123,6 +123,7 @@ static char *GetString(int &Length, cons
 class cCaPidReceiver : public cReceiver {
 private:
   int catVersion;
+  bool scaForceNewCat;
   cVector<int> emmPids;
   uchar buffer[1024]; // CAT table length: 10 bit -> max. 1021 + 3 bytes
   uchar *bufp;
@@ -154,6 +155,7 @@ public:
 cCaPidReceiver::cCaPidReceiver(void)
 {
   catVersion = -1;
+  scaForceNewCat = false;
   bufp = NULL;
   mtdNumCatPackets = 0;
   length = 0;
@@ -213,6 +215,7 @@ void cCaPidReceiver::Receive(const uchar
                     if (MtdCamSlot || ScaMapper) {
                        mtdNumCatPackets = 0;
                        memcpy(mtdCatBuffer[mtdNumCatPackets++], Data, TS_SIZE);
+                       scaForceNewCat = catVersion == -1 && ScaMapper;
                        }
                     }
                  else
@@ -276,6 +279,11 @@ void cCaPidReceiver::Receive(const uchar
                   }
                }
            if (MtdCamSlot || ScaMapper) {
+              if (scaForceNewCat) {
+                 catVersion = (catVersion + 0xF) & 0x1F; // pretend a version change
+                 uchar *c = const_cast<uchar *>(p + 5);
+                 *c = (*c & ~0x3E) | (catVersion << 1); // patch version
+                 }
               // update crc32
               uint32_t crc = SI::CRC32::crc32((const char *)p, length - 4, 0xFFFFFFFF); // <TableIdCAT....>[crc32]
               uchar *c = const_cast<uchar *>(p + length - 4);
